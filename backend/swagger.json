{
    "swagger": "2.0",
    "info": {
      "version": "1.0.0",
      "title": "Books Database App API",
      "description": "All backend APIs",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "host": "localhost:8000",
    "basePath": "/api/",
    "tags": [
      {
        "name": "Users",
        "description": "API for users in the system"
      },
      {
        "name": "Books",
        "description": "API for books in the system"
      },
      {
        "name": "Authors",
        "description": "API for authors in the system"
      }

    ],
    "schemes": [
      "http"
    ],
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "securityDefinitions": {
      "Bearer":{
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "IMPORTANT!!! Please use this format: Bearer: Token"
      }
  },
    "paths": {
      "/auth": {
        "post": {
          "summary": "Register user",
          "tags": [
            "Users"
          ],
          "description": "Register user in system",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "Register user",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Register Success",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "401":{
              "description": "Login details are not valid!!"
            },
            "404":{
              "description": "Email is not registered!"
            },
            "500":{
              "description": "User login failed!!"
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "summary": "Login user",
          "tags": [
            "Users"
          ],
          "description": "Login user in system",
          "parameters": [
            {
              "name": "user",
              "in": "body",
              "description": "Login user",
              "schema": {
                  "properties": {
                    "email": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  }
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Login Success"
            },
            "401":{
              "description": "Login details are not valid!!"
            },
            "404":{
              "description": "Email is not registered!"
            },
            "500":{
              "description": "User login failed!!"
            }
          }
        }
      },
      "/auth/me": {
        "get": {
          "security": [{"Bearer": []}] ,
          "summary": "Information about current user",
          "tags": [
            "Users"
          ],
          "description": "Information about current user",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Register Success",
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            },
            "401":{
              "description": "Login details are not valid!!"
            },
            "404":{
              "description": "Email is not registered!"
            },
            "500":{
              "description": "User login failed!!"
            }
          }
        }
      },
      "/books": {
        "get": {
          "summary": "Get all books",
          "tags": [
            "Books"
          ],
          "description": "Returns all books in DB",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Books returned",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            }
          }
        },
        "post": {
          "security": [{"Bearer": []}] ,
          "summary": "Create a books",
          "tags": [
            "Books"
          ],
          "description": "Creates a book in database",
          "parameters": [
            {
              "name": "book",
              "in": "body",
              "description": "get books",
              "schema": {
                "$ref":"#/definitions/Book"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Created a new book",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "401":{
              "description": "Unauthorised!"
            }
          }
        }
      },
      "/books/{id}": {
        "get": {
          "summary": "Get a book",
          "tags": [
            "Books"
          ],
          "description": "Get a single book",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Book id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned a book",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "404":{
              "description": "Book not found!"
            }
          }
        },
        "put": {
          "security": [{"Bearer": []}] ,
          "summary": "Update a book",
          "tags": [
            "Books"
          ],
          "description": "Update book",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Book id",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "book",
              "in": "body",
              "description": "update book",
              "schema": {
                "properties": {
                  "isbn" : {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "pages": {
                    "type": "number"
                  },
                  "published": {
                    "type": "number"
                  },
                  "image": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "401":{
              "description": "Unauthorised!"
            },
            "404":{
              "description": "Book not found!"
            }
          }
        },
        "delete": {
          "security": [{"Bearer": []}] ,
          "summary": "Delete a book",
          "tags": [
            "Books"
          ],
          "description": "Delete a book from DB",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Book id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "401":{
              "description": "Unauthorised!"
            },
            "404":{
              "description": "Book not found!"
            }
          }
        }
      },
      "/books/{id}/authors": {
        "get": {
          "summary": "Get a list of authors for {id} book",
          "tags": [
            "Books"
          ],
          "description": "Get a list of authors for {id} book",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Book id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "List of authoirs for book {id}",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            },
            "404":{
              "description": "Book not found!"
            }
          }
        },
        "post": {
          "security": [{"Bearer": []}] ,
          "summary": "Add new author to {id} book",
          "tags": [
            "Books"
          ],
          "description": "Add a new author to book {id}",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Book id",
              "schema": {
                "type":"string"
              }
            },
            {
              "in": "body",
              "name": "author",
              "description": "Author id",
              "schema": {
                  "properties": {
                    "author" : {
                      "type": "array",
                "items":{"type":"string"}
                    }
                  }
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Added a new author to book {id}",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "401":{
              "description": "Unauthorised!"
            },
            "404":{
              "description": "Book not found!"
            }
          }
        }
      },
      "/books/{idBook}/authors/{idAuthor}": {
        "delete": {
          "security": [{"Bearer": []}] ,
          "summary": "Delete {idAuthor} author from {idBook} book",
          "tags": [
            "Books"
          ],
          "description": "delete {idAuthor} author from {idBook} book",
          "parameters": [
            {
              "in": "path",
              "name": "idBook",
              "description": "Book id",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "idAuthor",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Deleted {idAuthor} author from {idBook} book",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            },
            "404":{
              "description": "Book or author not found!"
            }
          }
        }
      },
      "/authors": {
        "get": {
          "summary": "Get list of authors",
          "tags": [
            "Authors"
          ],
          "description": "Returns all authors in DB",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Authors returned",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            }
          }
        },
        "post": {
          "security": [{"Bearer": []}] ,
          "summary": "Create new author",
          "tags": [
            "Authors"
          ],
          "description": "Creates an author in database",
          "parameters": [
            {
              "in": "body",
              "name": "author",
              "description": "Post author",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            }

          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Created a new author",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            },
            "401":{
              "description": "Unauthorised!"
            }
          }
        }
      },
      "/authors/{id}": {
        "get": {
          "summary": "Get single author",
          "tags": [
            "Authors"
          ],
          "description": "Get a single author",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned an author",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            },
            "404":{
              "description": "Author not found!"
            }
          }
        },
        "put": {
          "security": [{"Bearer": []}] ,
          "summary": "Update author",
          "tags": [
            "Authors"
          ],
          "description": "Update author",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            },
              {
                "in": "body",
                "name": "author",
                "description": "Put author",
                "schema": {
                  "$ref": "#/definitions/Author"
                }
              }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            },
            "401":{
              "description": "Unauthorised!"
            },
            "404":{
              "description": "Author not found!"
            }
          }
        },
        "delete": {
          "summary": "Delete an Author",
          "security": [{"Bearer": []}] ,
          "tags": [
            "Authors"
          ],
          "description": "Delete an author from DB",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success"
            },
            "401":{
              "description": "Unauthorised!"
            },
            "404":{
              "description": "Author not found!"
            }
          }
        }
      },
      "/authors/{idAuthor}/books": {
        "get": {
          "summary": "Get a list of books for {idAuthor} author",
          "tags": [
            "Authors"
          ],
          "description": "Get a list of books for {idAuthor} author",
          "parameters": [
            {
              "in": "path",
              "name": "idAuthor",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "List of books for {idAuthor} author",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "404":{
              "description": "Author not found!"
            }
          }
        },
        "post": {
          "security": [{"Bearer": []}] ,
          "summary": "Add new book to {idAuthor} Author",
          "tags": [
            "Authors"
          ],
          "description": "Add a new book to {idAuthor} Author",
          "parameters": [
            {
              "in": "path",
              "name": "idAuthor",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            },
              {
                "in": "body",
                "name": "books",
                "description": "Book id",
                "schema": {
                  "properties": {
                    "books" : {
                      "type": "array",
                      "items": {"type":"string"}
                    }
                  }
                }
              }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Added a new book to {idAuthor} author",
              "schema": {
                "$ref": "#/definitions/Author"
              }
            },
            "401":{
              "description": "Unauthorised!"
            },
            "404":{
              "description": "Book not found!"
            }
          }
        }
      },
      "/authors/{idAuthor}/books/{idBook}": {
        "delete": {
          "security": [{"Bearer": []}] ,
          "summary": "Delete {idBook} book from {idAuthor} author",
          "tags": [
            "Authors"
          ],
          "description": "Delete {idBook} book from {idAuthor} author",
          "parameters": [
            {
              "in": "path",
              "name": "idAuthor",
              "description": "Author id",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "path",
              "name": "idBook",
              "description": "Book id",
              "schema": {
                "type": "string"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Deleted {idBook} book from {idAuthor} author",
              "schema": {
                "$ref": "#/definitions/Book"
              }
            },
            "404":{
              "description": "Book or author not found!"
            }
          }
        }
      }
    },
         



    "definitions": {
      "User": {
        "properties": {
          "name" : {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Book": {
        "properties": {
          "isbn" : {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "pages": {
            "type": "number"
          },
          "published": {
            "type": "number"
          },
          "authors": {
            "type": "array",
            "items":{"type": "string"}
              
          },
          "image": {
            "type": "string"
          }
        }
      },
      "Author": {
        "properties": {
          "id" : {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "books": {
            "type": "array",
            "items":{"type": "string"}
              
          },
          "image": {
            "type": "string"
          }
        }
      }



    }
  }